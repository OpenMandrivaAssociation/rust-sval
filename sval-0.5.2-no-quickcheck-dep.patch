diff -up sval-1.0.0-alpha.5/Cargo.toml.1~ sval-1.0.0-alpha.5/Cargo.toml
--- sval-1.0.0-alpha.5/Cargo.toml.1~	2021-01-27 03:13:15.000000000 +0100
+++ sval-1.0.0-alpha.5/Cargo.toml	2021-03-25 23:14:56.588646545 +0100
@@ -41,14 +41,6 @@ default-features = false
 [dependencies.sval_derive]
 version = "1.0.0-alpha.5"
 optional = true
-[dev-dependencies.quickcheck]
-version = "0.9"
-
-[dev-dependencies.wasm-bindgen]
-version = "0.2"
-
-[dev-dependencies.wasm-bindgen-test]
-version = "0.3"
 
 [features]
 alloc = []
diff -up sval-1.0.0-alpha.5/src/stream/stack.rs.1~ sval-1.0.0-alpha.5/src/stream/stack.rs
--- sval-1.0.0-alpha.5/src/stream/stack.rs.1~	2021-01-26 02:22:54.000000000 +0100
+++ sval-1.0.0-alpha.5/src/stream/stack.rs	2021-03-25 23:14:41.341567978 +0100
@@ -745,12 +745,6 @@ mod tests {
 
         use crate::std::vec::Vec;
 
-        use quickcheck::{
-            quickcheck,
-            Arbitrary,
-            Gen,
-        };
-
         // FIXME: This test isn't very clever about how a
         // sequence of commands is generated. It's more likely
         // to come up with a set that fails early than one
@@ -787,47 +781,6 @@ mod tests {
                 }
             }
         }
-
-        quickcheck! {
-            fn stack_does_not_panic(cmd: Vec<Command>) -> bool {
-                let mut stack = Stack::new();
-
-                for cmd in cmd {
-                    match cmd {
-                        Command::Primitive => {
-                            let _ = stack.primitive();
-                        },
-                        Command::MapBegin => {
-                            let _ = stack.map_begin();
-                        },
-                        Command::MapKey => {
-                            let _ = stack.map_key();
-                        },
-                        Command::MapValue => {
-                            let _ = stack.map_value();
-                        },
-                        Command::MapEnd => {
-                            let _ = stack.map_end();
-                        },
-                        Command::SeqBegin => {
-                            let _ = stack.seq_begin();
-                        },
-                        Command::SeqElem => {
-                            let _ = stack.seq_elem();
-                        },
-                        Command::SeqEnd => {
-                            let _ = stack.seq_end();
-                        },
-                        Command::End => {
-                            let _ = stack.end();
-                        },
-                    }
-                }
-
-                // So long as the stack doesn't panic we're happy
-                true
-            }
-        }
     }
 
     #[cfg(feature = "arbitrary-depth")]
